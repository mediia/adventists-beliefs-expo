{"version":3,"sources":["src/shared/NavigationBar.js","src/data/queries.js","src/data/glitch.js","src/data/useData.js","src/shared/RootSurface.js","src/home/BeliefImage.js","src/home/Belief.js","src/home/Doctrine.js","src/shared/LoadingPulse.js","src/home/DoctrineLoading.js","src/home/BeliefLoading.js","src/home/HomeScreenLoading.js","src/home/HomeScreen.js","src/belief/BeliefImageLoading.js","src/belief/DeclarationLoading.js","src/belief/BeliefScreenLoading.js","src/belief/BeliefImage.js","src/belief/VerseChip.js","src/belief/Declaration.js","src/belief/VerseDialog.js","src/belief/BeliefScreen.js","App.js"],"names":["NavigationBar","navigation","previous","scene","Appbar","Header","BackAction","onPress","goBack","Content","title","descriptor","options","glitch","HOME","gql","BELIEF","useData","query","variables","useQuery","queries","RootSurface","children","colors","useTheme","View","style","styles","container","backgroundColor","background","StatusBar","StyleSheet","create","flex","alignItems","justifyContent","BeliefImage","belief","Image","source","uri","image","height","width","borderRadius","Belief","useNavigation","Item","left","navigate","Doctrine","doctrine","Section","Subheader","toUpperCase","beliefs","map","key","_id","LoadingPulse","props","animation","useRef","Animated","Value","current","useEffect","loop","sequence","timing","toValue","duration","useNativeDriver","start","opacity","DoctrineLoading","BeliefLoading","HomeLoadingScreen","ScrollView","Dimensions","get","Home","loading","error","data","Text","message","doctrines","BeliefImageLoading","DeclarationLoading","Card","declaration","Paragraph","marginBottom","BeliefScreen","declarationsContainer","padding","VerseChip","verse","Chip","verseChip","reference","marginRight","Declaration","showVerse","text","versesContainer","verses","flexDirection","flexWrap","VerseDialog","hideVerse","Dialog","visible","onDismiss","Title","theme","route","params","React","useState","setVerse","declarations","Portal","client","ApolloClient","cache","InMemoryCache","Stack","createStackNavigator","App","ApolloProvider","NavigationContainer","Navigator","initialRouteName","screenOptions","header","Screen","name","component","HomeScreen"],"mappings":"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","file":"static/js/app.9ba93599.chunk.js","sourcesContent":["import React from 'react'\nimport { Appbar } from 'react-native-paper'\n\nexport default function NavigationBar({ navigation, previous, scene }) {\n\n  return (\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={scene.descriptor.options.title} />\n    </Appbar.Header>\n  );\n}\n","import glitch from './glitch'\n\nexport default glitch\n","import { gql } from '@apollo/client'\n\nconst HOME = gql`\n  query {\n    doctrines {\n      _id\n      order\n      title\n      beliefs {\n        _id\n        order\n        title\n        image\n      }\n    }\n  }\n`\n\nconst BELIEF = gql`\n  query($_id: ID!) {\n    belief(_id: $_id) {\n      _id\n      order\n      title\n      image\n      declarations {\n        _id\n        order\n        text\n        verses {\n          _id\n          reference\n          text\n        }\n      }\n    }\n  }\n`\n\nexport default {\n  HOME,\n  BELIEF\n}\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\n\nimport queries from './queries'\n\nexport default function useData(query, variables) {\n\n  return useQuery(queries[query], { variables })\n}\n","import React from 'react'\nimport { StatusBar, StyleSheet, View } from 'react-native'\nimport { useTheme } from 'react-native-paper'\n\nexport default function RootSurface({ children }) {\n\n  const { colors } = useTheme()\n\n  return (\n    <View style={[styles.container, { backgroundColor: colors.background }]}>\n      {children}\n      <StatusBar style=\"auto\" />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n","import React from 'react'\nimport { StyleSheet } from 'react-native'\nimport { Image } from 'react-native'\n\nexport default function BeliefImage({belief}) {\n\n  return (\n    <Image\n      source={{ uri: belief.image }}\n      style={styles.image}\n    />\n  )\n}\n\nconst styles = StyleSheet.create({\n  image: {\n    height: 29,\n    width: 29 * 15 / 8,\n    borderRadius: 2,\n  },\n})\n","import React from 'react'\nimport { List } from 'react-native-paper'\nimport { useNavigation } from '@react-navigation/native'\n\nimport BeliefImage from './BeliefImage'\n\nexport default function Belief({ belief }) {\n\n  const navigation = useNavigation()\n\n  return (\n    <List.Item\n      title={belief.title}\n      left={() => <BeliefImage belief={belief}/>}\n      onPress={() => navigation.navigate('Belief', { belief })}\n    />\n  )\n}\n","import React from 'react'\nimport { List } from 'react-native-paper'\n\nimport Belief from './Belief'\n\nexport default function Doctrine({ doctrine }) {\n\n  return (\n    <List.Section>\n      \n      <List.Subheader>{doctrine.title.toUpperCase()}</List.Subheader>\n\n      {doctrine.beliefs && doctrine.beliefs.map(belief => (\n\n        <Belief\n          key={belief._id}\n          belief={belief}\n        />\n\n      ))}\n\n    </List.Section>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport { Animated } from 'react-native'\n\nconst duration = 1000\n\nexport default function LoadingPulse(props) {\n\n  const animation = useRef(new Animated.Value(0.3)).current\n\n  useEffect(() => {\n    Animated.loop(\n      Animated.sequence([\n        Animated.timing(animation, {\n          toValue: 0.7,\n          duration,\n          useNativeDriver: false\n        }),\n        Animated.timing(animation, {\n          toValue: 0.3,\n          duration,\n          useNativeDriver: false\n        })\n      ])\n    ).start()\n  }, [animation])\n\n  return (\n    <Animated.View\n      style={{\n        height: 10,\n        width: 200,\n        borderRadius: 3,\n        backgroundColor: 'rgba(128, 128, 128, 1)',\n        ...props.style,\n        opacity: animation,\n      }}\n    >\n      {props.children}\n    </Animated.View>\n  );\n}\n","import React from 'react'\nimport { List } from 'react-native-paper'\n\nimport LoadingPulse from '../shared/LoadingPulse'\n\nexport default function DoctrineLoading({ children }) {\n\n  return (\n    <List.Section>\n      \n      <List.Subheader>\n        <LoadingPulse style={{ height: 17 }} />\n      </List.Subheader>\n\n      {children}\n\n    </List.Section>\n  )\n}\n","import React from 'react'\nimport { List } from 'react-native-paper'\n\nimport LoadingPulse from '../shared/LoadingPulse'\n\nexport default function BeliefLoading() {\n\n  return (\n    <List.Item\n      title={<LoadingPulse style={{ height: 18, }} />}\n      left={() => <LoadingPulse style={{ height: 29, width: 29 * 15 / 8, }} />}\n    />\n  )\n}\n","import React from 'react'\nimport { ScrollView, Dimensions, StyleSheet } from 'react-native'\n\nimport RootSurface from '../shared/RootSurface'\nimport DoctrineLoading from './DoctrineLoading'\nimport BeliefLoading from './BeliefLoading'\n\nexport default function HomeLoadingScreen() {\n\n  return (\n    <RootSurface>\n      <ScrollView style={styles.container}>\n        <DoctrineLoading>\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n        </DoctrineLoading>\n        <DoctrineLoading>\n          <BeliefLoading />\n          <BeliefLoading />\n        </DoctrineLoading>\n        <DoctrineLoading>\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n        </DoctrineLoading>\n        <DoctrineLoading>\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n        </DoctrineLoading>\n        <DoctrineLoading>\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n        </DoctrineLoading>\n        <DoctrineLoading>\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n          <BeliefLoading />\n        </DoctrineLoading>\n      </ScrollView>\n    </RootSurface>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: Dimensions.get('window').width\n  }\n})\n","import React from 'react'\nimport { Dimensions, ScrollView, StyleSheet, Text } from 'react-native'\n\nimport useData from '../data/useData'\nimport RootSurface from '../shared/RootSurface'\n\nimport Doctrine from './Doctrine'\nimport HomeScreenLoading from './HomeScreenLoading'\n\nconst width = Dimensions.get('window').width\n\nexport default function Home() {\n\n  const { loading, error, data } = useData('HOME')\n\n  if (loading) return <HomeScreenLoading/>\n\n  return (\n    <RootSurface>\n      <ScrollView style={styles.container}>\n\n        {error && <Text>Error! ${error.message}</Text>}\n\n        {!loading && !error && data.doctrines.map(doctrine => (\n\n          <Doctrine\n            key={doctrine._id}\n            doctrine={doctrine}\n          />\n\n        ))}\n\n      </ScrollView>\n    </RootSurface>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width\n  }\n})\n","import React from 'react'\nimport { Dimensions, StyleSheet } from 'react-native'\n\nimport LoadingPulse from '../shared/LoadingPulse'\n\nexport default function BeliefImageLoading() {\n\n  return <LoadingPulse style={styles.image} />\n}\n\nconst width = Dimensions.get('window').width\n\nconst styles = {\n  image: {\n    width,\n    height: width * 8 / 15,\n  }\n}\n","import React from 'react'\nimport { StyleSheet } from 'react-native'\nimport { Card, Paragraph } from 'react-native-paper'\n\nimport LoadingPulse from '../shared/LoadingPulse'\n\nexport default function DeclarationLoading() {\n\n  return (\n    <Card style={styles.declaration}>\n      <Card.Content>\n        <Paragraph>\n          <LoadingPulse/>\n          <LoadingPulse/>\n        </Paragraph>\n      </Card.Content>\n    </Card>\n  )\n}\n\nconst styles = StyleSheet.create({\n  declaration: {\n    marginBottom: 8,\n  }\n})\n","import React from 'react';\nimport { ScrollView, View, StyleSheet } from 'react-native';\n\nimport RootSurface from '../shared/RootSurface'\n\nimport BeliefImageLoading from './BeliefImageLoading'\nimport DeclarationLoading from './DeclarationLoading'\n\nexport default function BeliefScreen() {\n\n  return (\n    <RootSurface>\n      <ScrollView>\n        <BeliefImageLoading/>\n        <View style={styles.declarationsContainer}>\n          <DeclarationLoading/>\n          <DeclarationLoading/>\n        </View>\n      </ScrollView>\n    </RootSurface>\n  );\n}\n\nconst styles = StyleSheet.create({\n  declarationsContainer: {\n    padding: 8,\n  }\n})\n","import React from 'react'\nimport { Dimensions, Image, StyleSheet } from 'react-native'\n\nexport default function BeliefImage({belief}) {\n\n  return <Image style={styles.image} source={{ uri: belief.image }} />\n}\n\nconst width = Dimensions.get('window').width\n\nconst styles = StyleSheet.create({\n  image: {\n    width,\n    height: width * 8 / 15,\n  }\n})\n","import React from 'react'\nimport { StyleSheet } from 'react-native'\nimport { Chip } from 'react-native-paper'\n\nexport default function VerseChip({ verse, onPress }) {\n\n  return (\n    <Chip\n      key={verse._id}\n      style={styles.verseChip}\n      onPress={() => onPress(verse)}\n    >\n      {verse.reference}\n    </Chip>\n  )\n}\n\nconst styles = StyleSheet.create({\n  verseChip: {\n    marginRight: 4,\n  },\n})\n","import React from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { Card, Paragraph } from 'react-native-paper'\n\nimport VerseChip from './VerseChip'\n\nexport default function Declaration({ declaration, showVerse }) {\n\n  return (\n    <Card\n      key={declaration._id}\n      style={styles.declaration}\n    >\n      <Card.Content>\n        <Paragraph>\n          {declaration.text}\n        </Paragraph>\n        <View\n          style={styles.versesContainer}\n        >\n          {declaration.verses && declaration.verses.map(verse => (\n            <VerseChip\n              key={verse._id}\n              verse={verse}\n              onPress={showVerse}\n            />\n          ))}\n        </View>\n      </Card.Content>\n    </Card>\n  )\n}\n\nconst styles = StyleSheet.create({\n  declaration: {\n    marginBottom: 8,\n  },\n  versesContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n})\n","import React from 'react'\nimport { Dialog, Paragraph } from 'react-native-paper'\n\nexport default function VerseDialog({ verse, hideVerse }) {\n\n  return (\n    <Dialog visible={!!verse} onDismiss={hideVerse}>\n      <Dialog.Title>{verse && verse.reference}</Dialog.Title>\n      <Dialog.Content>\n        <Paragraph>{verse && verse.text}</Paragraph>\n      </Dialog.Content>\n    </Dialog>\n  )\n}\n","import React from 'react';\nimport { ScrollView, Text, View, StyleSheet } from 'react-native';\nimport { Portal, Dialog, Paragraph } from 'react-native-paper'\n\nimport useData from '../data/useData'\nimport RootSurface from '../shared/RootSurface'\n\nimport BeliefScreenLoading from './BeliefScreenLoading'\nimport BeliefImage from './BeliefImage'\nimport Declaration from './Declaration'\nimport VerseDialog from './VerseDialog';\n\nexport default function BeliefScreen({ theme, route }) {\n\n  const { belief } = route.params\n\n  const { loading, error, data } = useData('BELIEF', { _id: belief._id })\n  \n  const [verse, setVerse] = React.useState(null)\n\n  const showVerse = verse => setVerse(verse)\n\n  const hideVerse = () => setVerse(null)\n\n  if (loading) return <BeliefScreenLoading/>\n\n  return (\n    <RootSurface>\n      <ScrollView>\n        {error && <Text>Error! ${error.message}</Text>}\n\n        {!loading && !error && data.belief && (\n\n          <View>\n            <BeliefImage belief={data.belief}/>\n            <View style={styles.declarationsContainer}>\n\n              {data.belief.declarations && data.belief.declarations.map(declaration => (\n                <Declaration\n                  key={declaration._id}\n                  declaration={declaration}\n                  showVerse={showVerse}\n                />\n              ))}\n\n            </View>\n          </View>\n        )}\n      </ScrollView>\n      <Portal>\n        <VerseDialog verse={verse} hideVerse={hideVerse} />\n      </Portal>\n    </RootSurface>\n  );\n}\n\nconst styles = StyleSheet.create({\n  declarationsContainer: {\n    padding: 8,\n  }\n})\n","import React from 'react'\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport 'react-native-gesture-handler'\nimport { Provider as PaperProvider } from 'react-native-paper'\n\nimport NavigationBar from './src/shared/NavigationBar'\nimport HomeScreen from './src/home/HomeScreen'\nimport BeliefScreen from './src/belief/BeliefScreen'\n\n// Initialize Apollo Client\nconst client = new ApolloClient({\n  uri: 'https://mediia-adventist-beliefs.glitch.me/',\n  cache: new InMemoryCache()\n})\n\n// Initialize main Stack Navigator\nconst Stack = createStackNavigator()\n\nexport default function App() {\n\n  return (\n    <PaperProvider>\n      <ApolloProvider client={client}>\n        <NavigationContainer>\n          <Stack.Navigator\n            initialRouteName=\"Home\"\n            screenOptions={{\n              header: (props) => <NavigationBar {...props} />\n            }}\n          >\n            <Stack.Screen name=\"Home\"\n              component={HomeScreen}\n              options={{ title: 'Adventist Beliefs' }}\n            />\n            <Stack.Screen name=\"Belief\"\n              component={BeliefScreen}\n              options={({ route }) => ({ title: route.params.belief.title })}\n            />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </ApolloProvider>\n    </PaperProvider>\n  )\n}\n"],"sourceRoot":""}